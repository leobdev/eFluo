@model IEnumerable<ManageUserRolesViewModel>
@using eFluo.Models.ViewModels
@using Microsoft.AspNetCore.Identity
@using eFluo.Services.Interfaces



@inject UserManager<PSUser> UserManager
@inject IPSRolesService RolesService

@{


}

<div class="container-fluid">


    <h1>Users</h1>



    <div class="row">
        <div class="col-xl-10 col-lg-10 col-md-10 col-sm-12 col-12">
            <div class="statbox widget box box-shadow">
                <div class="widget-content widget-content-area">
                    <table id="style-3" class="table style-3  table-hover" style="width:100%">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Current Role</th>
                                <th>New Role</th>
                                <th></th>

                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>@item.PSUser.FullName</td>
                                         <td>
                                        @foreach(var role in item.UserRoles)
                                        {
                                            <a asp-action="RemoveRole"  asp-route-userId="@item.PSUser.Id" asp-route-role="@role" data-toggle="tooltip" data-placement="top" title="remove role" class="bs-tooltip btn btn-outline-primary">@role</a>
                                            
                                        }
                                        </td>
                                        <form asp-action="ManageUserRoles" asp-controller="UserRoles" method="post">
                                    <td>
                                        <div>
                                            <input type="hidden" value="@item.PSUser.Id" name="userId" />
                                        </div>

                                            
                                            
                                        
                                                <select asp-for="@item.SelectedRole" class="form-control" asp-items="@item.Roles"></select>
                                           
                                    </td>
                                    <td>
                                        <div>

                                                <input type="submit" class="btn btn-primary" value="Assign Role">
                                        </div>
                                    </td>
                                        </form>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>



</div>

@section scripts {

    <script>
        $('#style-3').DataTable({
            "dom": "<'dt--top-section'<'row'<'col-12 col-sm-6 d-flex justify-content-sm-start justify-content-center'l><'col-12 col-sm-6 d-flex justify-content-sm-end justify-content-center mt-sm-0 mt-3'f>>>" +
                "<'table-responsive'tr>" +
                "<'dt--bottom-section d-sm-flex justify-content-sm-between text-center'<'dt--pages-count  mb-sm-0 mb-3'i><'dt--pagination'p>>",
            "oLanguage": {
                "oPaginate": { "sPrevious": '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-arrow-left"><line x1="19" y1="12" x2="5" y2="12"></line><polyline points="12 19 5 12 12 5"></polyline></svg>', "sNext": '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-arrow-right"><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></svg>' },
                "sInfo": "Showing page _PAGE_ of _PAGES_",
                "sSearch": '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-search"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg>',
                "sSearchPlaceholder": "Search...",
                "sLengthMenu": "Results :  _MENU_",
            },
            "stripeClasses": [],
            "lengthMenu": [5, 10, 20, 50],
            "pageLength": 10
        });


        $('#userRole').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget) // Button that triggered the modal
            var user = button.data('psuser') // Extract info from data-* attributes
            var userId = button.data('id') // Extract info from data-* attributes
            var role = button.data('roleId') // Extract info from data-* attributes

            // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
            // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
            var modal = $(this)
            modal.find('.modal-title').text('New message to ' + user)
            modal.find('.modal-body input').val(userId)

        });

    </script>

}







